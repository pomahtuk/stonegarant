@font-face {
  font-family: 'museo_1';
  src: url('../../fonts/museo_1/font.eot');
  src: url('../../fonts/museo_1/font.eot?#iefix') format('embedded-opentype'),
       url('../../fonts/museo_1/font.woff')       format('woff'),
       url('../../fonts/museo_1/font.ttf')        format('truetype');
}

@font-face {
  font-family: 'museo_2';
  src: url('../../fonts/museo_2/font.eot');
  src: url('../../fonts/museo_2/font.eot?#iefix') format('embedded-opentype'),
       url('../../fonts/museo_2/font.woff')       format('woff'),
       url('../../fonts/museo_2/font.ttf')        format('truetype');
}

@font-face {
  font-family: 'pt_suns_regular';
  src: url('../../fonts/pt_suns_regular/font.eot');
  src: url('../../fonts/pt_suns_regular/font.eot?#iefix') format('embedded-opentype'),
       url('../../fonts/pt_suns_regular/font.woff')       format('woff'),
       url('../../fonts/pt_suns_regular/font.ttf')        format('truetype');
}

@mixin corp_font    { font-family: "pt_suns_regular", sans-serif, Helvetica, Arial;    }
@mixin pts_font     { font-family: "pt_suns_regular", sans-serif, Helvetica, Arial;    }
@mixin museo_1_font { font-family: "museo_1", sans-serif, Helvetica, Arial;            }
@mixin museo_2_font { font-family: "museo_2", sans-serif, Helvetica, Arial;            }
@mixin museo_font   { font-family: "museo_1", "museo_2", sans-serif, Helvetica, Arial; }

@mixin corp_light { font-family: "HelveticaNeue-Light", Helvetica, Arial, sans-serif; font-weight: 100; }
@mixin treb_ms    { font-family: 'Trebuchet MS', Helvetica, sans-serif }
@mixin arial      { font-family: Arial, Helvetica, sans-serif          }
@mixin times      { font-family: 'Times New Roman', Times, serif       }

@mixin overblock{ overflow: hidden; zoom: 1 }

@mixin inline-block{
  display: inline-block;
  *display: inline;
  zoom: 1
}

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

/* for sliders building */
@mixin nobr_block{
  white-space: nowrap;
  word-spacing:   -2px;
  letter-spacing: -2px;
}

@mixin nobr_item{
  @include inline-block;
  vertical-align: top;
  letter-spacing: normal;
  word-spacing:   normal;
}

/* no text elements select */
@mixin no_text_select{
  -webkit-touch-callout: none;
  -webkit-user-select:   none;
  -khtml-user-select:    none;
  -moz-user-select:      none;
  -ms-user-select:       none;
  -o-user-select:        none;
  user-select:           none;
}
